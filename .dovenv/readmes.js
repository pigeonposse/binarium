import { Typescript2Markdown } from '@dovenv/convert'
import { defineConfig }        from '@dovenv/core'
import {
	getCurrentDir,
	getMD,
	getObjectFromJSONFile,
	joinPath,
	replacePlaceholders,
	color,
	geMDTocString,
	writeFileContent,
	existsFile,
	resolvePath,
	incrementMdHeaders,
	line,
} from '@dovenv/utils'

import {
	markSchema,
	pkgSchema,
	validateSchema,
} from './schema.js'

/**
 * @typedef {object} BuildCoreReadmeOptions
 * @property {import('@dovenv/core').Config} config - dovenv configuration
 * @property {string} [id] - package id
 * @property {string[]} [templatePath] - Path to the template file
 * @property {string[]} [docsPath] - Path to the content file
 * @property {string} [title] - Title for the README
 * @property {string[] | false } [input] - Path to the input file
 */

/**
 * Builds the core README file.
 * @param {BuildCoreReadmeOptions} options - Options for building the core README.
 */
const buildCoreReadme = async ( {
	config,
	id = undefined,
	templatePath = [ 'readme.md' ],
	outputPath = [ 'README.md' ],
	docsPath = [ 'docs', 'index.md' ],
	title,
	input = [ 'src', 'main.ts' ],
} ) => {

	try {

		if ( !config.const.pkg ) throw 'Must exist [pkg] const in dovenv configuration'
		if ( !config.const.mark ) throw 'Must exist [mark] const in dovenv config.\nThis must be a text, for example a watermark, a trademark, or a simple text about the project.'

		await validateSchema( pkgSchema, config.const.pkg, 'pkg' )
		await validateSchema( markSchema, config.const.mark, 'mark' )

		const projectPath        = id ? joinPath( 'packages', id ) : '.'
		const currentDir         = getCurrentDir( import.meta.url )
		const partialsDir        = joinPath( currentDir, 'partials' )
		const readmeTemplatePath = joinPath( currentDir, 'templates', ...templatePath )
		const readmePath         = joinPath( projectPath, outputPath )
		const projectPackage     = joinPath( projectPath, 'package.json' )
		const contentPath        = joinPath( projectPath, ...docsPath )
		const tsconfigPath       = joinPath( projectPath, 'tsconfig.json' )
		const socialPath         = joinPath( partialsDir, 'social.md' )
		const footerPath         = joinPath( partialsDir, 'footer.md' )
		const headerPath         = joinPath( partialsDir, 'header.md' )
		const data               = await getObjectFromJSONFile( projectPackage )
		console.log( line( {
			title    : color.cyan( `Build README [${id || 'workspace'}]` ),
			lineChar : ' ',
		} )  )
		console.log( line( {
			title    : '',
			lineChar : color.cyan.dim( '⎯' ),
		} )  )
		console.debug( {
			config,
			id,
			templatePath,
			docsPath,
			title,
			input,
		} )

		let api = ''

		if ( input ) {

			const ts2md = new Typescript2Markdown( {
				input : [ joinPath( projectPath, ...input ) ],
				opts  : {
					tsconfigPath    : tsconfigPath,
					packageJsonPath : projectPackage,
					typedocMarkdown : {
						hidePageHeader : true,
						hidePageTitle  : true,
					},
				},
			} )

			const { content } = ( await ts2md.run() )[0]

			api = `## Api documentation\n\n` + await incrementMdHeaders( content )

		}

		const params = {
			pkg   : config.const.pkg,
			desc  : data.description,
			name  : data.name,
			title : title || data.name,
			mark  : config.const.mark,
		}

		params.social = await replacePlaceholders( {
			content : await getMD( socialPath ),
			params,
		} )

		params.header = await replacePlaceholders( {
			content : await getMD( headerPath ),
			params,
		} )

		params.footer = await replacePlaceholders( {
			content : await getMD( footerPath ),
			params,
		} )

		const readmeTemplate    = await getMD( readmeTemplatePath )
		const readmeContentPre1 = await replacePlaceholders( {
			content : readmeTemplate,
			params  : {
				content : await existsFile( contentPath )
					? ( await incrementMdHeaders( await getMD( resolvePath( contentPath ) ) ) )
					: '',
				api : api,
			},
		} )

		const readmeContentPre2 = await replacePlaceholders( {
			content : readmeContentPre1,
			params,
		} )

		const readmeContent = await replacePlaceholders( {
			content : readmeContentPre2,
			params  : { toc : await geMDTocString( {
				input           : readmeContentPre2,
				title           : 'Table of contents',
				removeH1        : true,
				maxHeadingLevel : 3,
			} ) },
		} )

		await writeFileContent(
			readmePath,
			'<!--\nAUTOGEN BY DOVENV - START\nDo not edit this file\n-->\n\n' + readmeContent + '\n\n<!--\nAUTOGEN BY DOVENV - END\n-->',
		)

		console.log()
		console.log( color.green( `[${id || 'workspace'}] Successfully created!! ✨✨` ) )
		console.log( line( {
			title    : '',
			lineChar : color.cyan.dim( '⎯' ),
		} )  )
		console.log()

	}
	catch ( e ) {

		console.error( color.red( e ) )

	}

}

export default defineConfig( { custom : { readmes : {
	desc : 'Create package readmes simultaneously',
	fn   : async ( { config } ) => {

		/** @type {Array<BuildCoreReadmeOptions>} */
		const data = [
			{
				title        : 'Binarium',
				input        : false,
				templatePath : [ 'readme-ws.md' ],
				docsPath     : [ 'docs', 'usage.md' ],
			},
		]

		for ( const item of data ) {

			await buildCoreReadme( {
				config,
				...item,
			} )

		}

	},
} } } )
